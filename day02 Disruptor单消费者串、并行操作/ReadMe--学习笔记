day two:
1.Disruptor核心链路应用分析
1.1 传统的完全解耦模式
1.2 模板模式-->不能够适应快速变化的需求
1.3 领域模型高度抽象
1.4 寻求更好的框架帮助我们编码-->帮助将核心链路中台化
	大中台服务-->将服务抽象拆分为多个最小粒度的点放入大中台，服务之间可以相互组合串连
				如果有新的业务出来了，根据业务需求去调用大中台的服务

2.使用框架-->有限状态机框架,例如Spring-StateMachine
			介绍:类似一种工作流，甚至还能做forkJoin
		 -->使用Disruptor	
		 
3.Disruptor串、并行操作->具体见代码
3.1注意handleEventsWith方法可以添加多个
	-->串行操作：使用链式调用的方式
	-->并行操作：使用单独调用的方式
3.2串行操作-->见Main类代码
3.3并行操作-->见Main类代码
3.4.多边形操作-->串并行编码，类forkJoin模式

4.注意以上单消费者的串并行操作和多边形操作，disruptor里的线程池的线程数量要大于使用的handler对象的数量
    这对应源码中EventProcessor的实现类BatchEventProcessor调用了具体消费端的逻辑，每一个handler对象都会拥有一个BatchEventProcessor用于监听事件
    只要实现了EventProccessor，都需要实现run方法
    多消费者模式不会有这种问题，这是因为多消费者模式不会直接像单消费者模式这样使用BatchEventProcessor